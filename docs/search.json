[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this study",
    "section": "",
    "text": "*Kaique S. Alves1, Emerson M. Del Ponte1\n1 Departamento de Fitopatologia, Universidade Federal de Viçosa, Viçosa, MG 36570-900, Brazil\n\n*Corresponding author: E. M. Del Ponte\nEmail: delponte@ufv.br"
  },
  {
    "objectID": "about.html#summary",
    "href": "about.html#summary",
    "title": "About this study",
    "section": "Summary",
    "text": "Summary\nIn this study, we explored the large database of 2441 first occurrences of soybean rust in commercial fields at the municipality level within 17 growing seasons (2005 to 2021) in the three southernmost Brazilian states. Considerable variability in the timing of disease onset was uncovered. Results from spatially structured Bayesian survival models indicated that the timing of disease onset was influenced by anomalies in the normal SST of the El Niño 3.4 region in the central Pacific before and during the crop season: MJJ and OND, respectively. The increase in ONI (e.g: warmer SST than normal) in these trimesters is expected to trigger the early onset of SBR epidemics in southern Brazil."
  },
  {
    "objectID": "about.html#original-article",
    "href": "about.html#original-article",
    "title": "About this study",
    "section": "Original article",
    "text": "Original article\n\n\n\n\n\n\nThis repository contains the data and code for our article:"
  },
  {
    "objectID": "about.html#read-the-preprint",
    "href": "about.html#read-the-preprint",
    "title": "About this study",
    "section": "Read the Preprint",
    "text": "Read the Preprint\n\n\n\n\n\n\nOur pre-print is online on the OSF preprint server:\n\n\n\nAlves, K. S., & Del Ponte, E. M. (2021, October 23). title. https://doi.org/10.31219/osf.io/rz4uh"
  },
  {
    "objectID": "about.html#research-compendium",
    "href": "about.html#research-compendium",
    "title": "About this study",
    "section": "Research compendium",
    "text": "Research compendium\n\n\n\n\n\n\nPlease cite this research compendium as:\n\n\n\nAlves, K. S., & Del Ponte, E. M. (2021, October 22). Research Compendium: XXXXX. https://doi.org/10.17605/OSF.IO/2KHFV"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Info",
    "section": "",
    "text": "This repository contains the codes used to obtain and analyze the data used on a research study. Read about the study here.\nThe codes used here were written using R version 4.0.3 and scripted on Quarto (.qmd) documents. Follow instruction on the Get Started page of the Quarto website to run the scripts included in this repository.\n\n\n\n\n\n\nReseach compendium\n\n\n\nThe full research compendium with data and scripts used for this study is stored in an Open Science Framework repository and can be accessed here. Download the full repository and run the analysis in your machine."
  },
  {
    "objectID": "index.html#licensing",
    "href": "index.html#licensing",
    "title": "Info",
    "section": "Licensing",
    "text": "Licensing\nCode: MIT year: 2022, copyright holder: Kaique S. Alves"
  },
  {
    "objectID": "index.html#repository-maintainer",
    "href": "index.html#repository-maintainer",
    "title": "Info",
    "section": "Repository maintainer",
    "text": "Repository maintainer\nKaique S. Alves\n\nD.Sc candidate in the Plant Pathology graduate program from Universidade Federal de Vi?osa in Brazil.\nVisiting Scholar in the EVADE program of the Plant Pathology & Plant-Microbe Biology Section, School of Integrative Plant Science, Cornell University.\n\nPersonal website | GitHub | Google Scholar"
  },
  {
    "objectID": "main_enso_onset.html",
    "href": "main_enso_onset.html",
    "title": "Data analysis",
    "section": "",
    "text": "R packages instalation\n\n\n\nMake sure to have all packages bellow instaled before reproducing the analysis. To install these packages, one can use the function install.packages(). However, for installing the INLA package, we recommend following the instruction provided the INLA website.\n\n\n\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(rgdal)\nlibrary(spdep)\nlibrary(INLA)\nlibrary(distributional)\nlibrary(viridis)\nlibrary(lubridate)\nlibrary(lemon)\nlibrary(ggthemes)\nlibrary(cowplot)"
  },
  {
    "objectID": "main_enso_onset.html#load-enso-data",
    "href": "main_enso_onset.html#load-enso-data",
    "title": "Data analysis",
    "section": "Load ENSO data",
    "text": "Load ENSO data\nHere we load the data on Oceanic Niño Index (ONI)\n\nensodata2 =read.csv( \".data/enso_tidy.csv\") %>% \n  #removing ther X column \n  dplyr::select(-X) %>% \n  # reodering the enso column as \"Neutral\" > \"El Niño\" > \"La Niña\"\n  mutate(enso = factor(enso, c(\"Neutral\",\"El Niño\", \"La Niña\"))) %>% \n  # tranforming the seasons column to type character\n  mutate(season = as.character(season))"
  },
  {
    "objectID": "main_enso_onset.html#exploring-enso-data",
    "href": "main_enso_onset.html#exploring-enso-data",
    "title": "Data analysis",
    "section": "Exploring ENSO data",
    "text": "Exploring ENSO data\n\nONI_trimesters = ensodata2 %>% \n  pivot_longer(1:12,\n               names_to = \"trimester\",\n               values_to = \"ONI\") %>% \n  mutate(trimester = factor(trimester,\n                            levels =c(\"DJF\",\"JFM\",\"FMA\",\"MAM\",\"AMJ\",\"MJJ\",\"JJA\",\"JAS\",\"ASO\",\"SON\",\"OND\",\"NDJ\" ) ))\nONI_trimesters\n\n\n  \n\n\n\n\nONI over time for each year (2004 to 2020)\n\nONI_trimesters %>% \n  ggplot(aes(trimester, ONI, group = season, color = enso))+\n  geom_hline(yintercept = 0, color = \"gray\")+\n  scale_color_colorblind()+\n  geom_vline(xintercept = \"OND\", color = \"gray\")+\nstat_summary(fun.y=sum, geom=\"line\")+\n  theme_half_open()\n\nWarning: `fun.y` is deprecated. Use `fun` instead.\n\n\n\n\n\n\n\nONI for selected trimesters\n\nJanuary, February, and March (ONIJFM, prior to the growing season);\nMay, June, and July (ONIMJJ, prior to the growing season);\nOctober, November, and December (ONIOND, within the growing season)\n\n\nONI_trimesters %>%  \n  filter(trimester %in% c(\"JFM\", \"MJJ\", \"OND\")) %>% \n  ggplot(aes( trimester, ONI, group = trimester, color = ONI))+\n  geom_hline(yintercept = 0, color = \"gray\")+\n  geom_errorbar(aes(ymin=0, ymax  = ONI), width = 0, color = \"black\")+\n  geom_line(aes(group = season), color=\"black\")+\n  geom_point(size = 3)+\n   \n  geom_segment(x = 2.7, y = 2.8, xend = 3.6, yend =2.8,\n               color = \"black\",\n               size =1,\n               arrow = arrow(length = unit(0.09, \"npc\")))+\n  annotate(geom =\"text\", x = 2.5, y =3.25 ,label = \"Growing season\", size = 2.5)+\n  scale_y_continuous(breaks = seq(-1.6, 2.4, by  = 0.8))+\n  scale_color_viridis()+\n  theme_half_open(font_size = 12)+\n  facet_rep_wrap(~season)+\n  labs(x = \"Trimester\",\n       y = \"Oceanic Niño Index (°C)\",\n       color = \"ENSO phase (OND)\")+\n  theme(strip.background = element_blank(),\n        \n        legend.position = \"none\")\n\n\n\nggsave(\".figs/ONItrimeter.png\", dpi = 600, height = 6.5, width = 9, bg = \"white\")\n\n\n\nONI distribution per trimester\n\nONI values arranged from lowest to highest\n\n\nONI_trimesters%>% \n  filter(trimester %in% c(\"JFM\", \"MJJ\", \"OND\")) %>% \n  arrange(ONI)\n\n\n  \n\n\n\n\nBoxplot\n\n\nONI_trimesters%>% \n  filter(trimester %in% c(\"JFM\", \"MJJ\", \"OND\")) %>% \n  ggplot(aes(trimester, ONI, color = ONI))+\n  geom_hline(yintercept = 0, linetype = 2, color=\"gray\")+\n  geom_boxplot(width = 0.2, alpha =0)+\n  geom_jitter(width = 0.1, size =2)+\n  scale_color_viridis()+\n  theme_half_open()+\n  labs(x = \"Trimester\",\n       y = \"Oceanic Niño index (ONI) (°C)\")+\n  theme(legend.position = \"none\")\n\n\n\nggsave(\".figs/ONIbox_plot.png\", dpi = 600, height = 4, width = 4, bg = \"white\")\n\n\nSummaries\n\n\nONI_trimesters%>% \n  filter(trimester %in% c(\"JFM\", \"MJJ\", \"OND\")) %>% \n  group_by(trimester) %>% \n  summarise(ONI_mean = round(mean(ONI),2),\n            ONI_sd = round(sd(ONI),2),\n            median(ONI),\n            min(ONI),\n            max(ONI))\n\n`summarise()` ungrouping output (override with `.groups` argument)"
  },
  {
    "objectID": "main_enso_onset.html#cox-proportional-hazards-model",
    "href": "main_enso_onset.html#cox-proportional-hazards-model",
    "title": "Data analysis",
    "section": "Cox Proportional Hazards Model",
    "text": "Cox Proportional Hazards Model\n\nData preparation\n\nSBR data\n\nsbr_rep_count = sbr_rep %>%\n  mutate(count =  1) %>% \n  mutate(season = as.character(season))\n\n\n\nLoading shapefiles\nShape files will be used for the obtaining the spatial structure of municipalities\n\nshape_sul= readOGR(\".shapefiles/BR_MUN1997_S_region\",\"BR_MUN1997_S_region\" )\n\nOGR data source with driver: ESRI Shapefile \nSource: \"G:\\.shortcut-targets-by-id\\1dhaIjvNvB3338uiITeAH9RsOtKndESF7\\Kaique-Alves\\SBR-soybean\\02 - SBR_spatiotemporal-description\\v2\\01 - repository\\.shapefiles\\BR_MUN1997_S_region\", layer: \"BR_MUN1997_S_region\"\nwith 1159 features\nIt has 19 fields\n\nshape_sul@data$id = rownames(shape_sul@data)\nsul_points = fortify(shape_sul)\nsul_df =plyr::join(sul_points, shape_sul@data, by=\"id\")\n\nObtaining the names of the municipalities from the shape files (formatting in the municipalies names in SBR dataset and shape files were different).\n\nIDs = unique(sul_df$id)\nlocation2 = numeric(length(sbr_rep_count$lat))\nfor(i in 1:length(IDs)){\n qqq = sul_df %>%\n  filter(id == IDs[i])\n\ncity = as.character(unique(qqq$MUNIC_PIO))\n\n for(j in 1:length(sbr_rep_count$lat)){\n    pip = point.in.polygon(point.x = sbr_rep_count$lon[j],\n                           point.y = sbr_rep_count$lat[j],\n                           pol.x = qqq$long,\n                           pol.y = qqq$lat)\n\n      if(pip > 0){location2[j] = city}\n\n }\n}\nsbr_rep_count_new = sbr_rep_count %>%\n  mutate(MUNIC_PIO = location2)\n\n\n\nINLA Data\nCreating the data set with new municipalities names\n\nmonths = c(\"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\",\"Apr\",\"May\")\ninla_data_geral = sbr_rep_count %>%\n  mutate(month = factor(month, levels = months)) %>% \n  full_join(sbr_rep_count_new %>% mutate(month = factor(month, levels = months))) %>% \n  full_join(data.frame(MUNIC_PIO = unique(sbr_rep_count_new$MUNIC_PIO)) %>% \n  mutate(S = 1:length(MUNIC_PIO)))\n\nJoining, by = c(\"start_date\", \"season\", \"state\", \"location\", \"date_report\", \"Phen_state\", \"month\", \"days\", \"lat\", \"lon\", \"Phen_state_int\", \"start_season\", \"days_sep15\", \"week\", \"region\", \"count\")\n\n\nJoining, by = \"MUNIC_PIO\"\n\n\n\n\nadding ONI values\n\ninla_data_enso = inla_data_geral %>% \n  full_join(ensodata2)\n\nJoining, by = \"season\"\n\n\n\n\nNeighbour by distance 200 km\n\nsul_locations = unique(sbr_rep_count_new$MUNIC_PIO)\n\nshape_sul_sub = subset(shape_sul, shape_sul$MUNIC_PIO%in%sul_locations )\n\ncoords_pr = coords <- coordinates(shape_sul_sub)\n\nIDs_pr <- row.names(as(shape_sul_sub, \"data.frame\"))\n\nlong = coords_pr[,1]\nlat = coords_pr[,2]\nxy <- data.frame(ID = 1:(length(lat)), long, lat)\n\ncoordinates(xy) <- c(\"long\", \"lat\")\nproj4string(xy) <- CRS(\"+init=epsg:4326\")\n\nres <- spTransform(xy, CRS(\"+proj=utm +zone=22 +south ellps=WGS84\"))\n\nWarning in showSRID(uprojargs, format = \"PROJ\", multiline = \"NO\"): Discarded\ndatum Unknown based on WGS84 ellipsoid in CRS definition\n\ncoords_grid = as.data.frame(res)\ncoords2 = as.matrix(coords_grid[,2:3])\ncolnames(coords2) <- c(\"x1\",\"x2\")\n\n\ndnear_dist_200 = dnearneigh(coords2, 0,200000, row.names=IDs_pr)\n\n# nb2INLA(\"./models/grid200.graph\",dnear_dist_200)\nW.pr_dist200 = inla.read.graph(\"./.models/grid200.graph\")\nplot(shape_sul_sub)\nplot(dnear_dist_200,coordinates(shape_sul_sub),col =\"red\", add = T)\n\n\n\n\n\n\n\nModel fitting\n\nPC priors\n\n\nu <- 0.2/0.31\nalpha <- 0.01\nphi.u <- 0.5\nphi.alpha <- 2/3\n\n\nModel for OND\n\nform_surv_ONI1 = inla.surv(days, count) ~ 1 + OND + \n  f(season, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n  f(S, model = \"bym2\", graph = W.pr_dist200,\n    hyper = list(prec = list(param = c(0.001, 0.001)), \n                 phi = list(prior = \"pc\", \n                            param = c(phi.u, phi.alpha),\n                            initial = -3)))\n\n\nsurv_fit_ONI1 = inla(form_surv_ONI1,\n                        data = inla_data_enso,\n                        family = \"coxph\",\n                     control.fixed=list(prec.intercept=1),\n                      control.hazard = list(hyper = list(prec = list(param = c(0.001, 0.001)))),\n                        control.compute=list(dic=TRUE,\n                                             cpo=TRUE,\n                                             waic=TRUE,\n                                             openmp.strategy=\"huge\"))\n\n# saveRDS(surv_fit_ONI1, \"./.models/model_oni1.RDS\")\n\n\nModel summary\n\nsummary(surv_fit_ONI1)\n\n\nCall:\n   c(\"inla(formula = cph$formula, family = cph$family, contrasts = \n   contrasts, \", \" data = c(as.list(cph$data), cph$data.list), quantiles = \n   quantiles, \", \" E = cph$E, offset = offset, scale = scale, weights = \n   weights, \", \" Ntrials = NULL, strata = NULL, verbose = verbose, lincomb \n   = lincomb, \", \" selection = selection, control.compute = \n   control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inla, \n   control.results = control.results, \", \" control.fixed = control.fixed, \n   control.mode = control.mode, \", \" control.expert = control.expert, \n   control.hazard = control.hazard, \", \" control.lincomb = \n   control.lincomb, control.update = control.update, \", \" control.pardiso \n   = control.pardiso, only.hyperparam = only.hyperparam, \", \" inla.call = \n   inla.call, inla.arg = inla.arg, num.threads = num.threads, \", \" \n   blas.num.threads = blas.num.threads, keep = keep, working.directory = \n   working.directory, \", \" silent = silent, debug = debug)\") \nTime used:\n    Pre = 37.6, Running = 79.7, Post = 1.31, Total = 119 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -3.788 0.136     -4.052   -3.790     -3.516 -3.792   0\nOND          0.323 0.097      0.130    0.323      0.517  0.323   0\n\nRandom effects:\n  Name    Model\n    season IID model\n   S BYM2 model\n   baseline.hazard RW1 model\n\nModel hyperparameters:\n                                  mean       sd 0.025quant 0.5quant 0.975quant\nPrecision for season          5.80e+00 2.26e+00   2.43e+00 5.47e+00   1.12e+01\nPrecision for S               2.16e+09 6.36e+10   4.28e+06 1.11e+08   1.22e+10\nPhi for S                     2.83e-01 2.50e-01   9.00e-03 2.03e-01   8.71e-01\nPrecision for baseline.hazard 2.98e+01 1.19e+01   1.22e+01 2.80e+01   5.82e+01\n                                  mode\nPrecision for season          4.80e+00\nPrecision for S               7.94e+06\nPhi for S                     1.50e-02\nPrecision for baseline.hazard 2.44e+01\n\nExpected number of effective parameters(stdev): 28.52(0.512)\nNumber of equivalent replicates : 654.35 \n\nDeviance Information Criterion (DIC) ...............: 14792.55\nDeviance Information Criterion (DIC, saturated) ....: 9910.54\nEffective number of parameters .....................: 28.82\n\nWatanabe-Akaike information criterion (WAIC) ...: 14791.26\nEffective number of parameters .................: 27.33\n\nMarginal log-Likelihood:  -6871.11 \nCPO and PIT are computed\n\nPosterior marginals for the linear predictor and\n the fitted values are computed\n\n\n\n\nParameters\n\nPosterior distribution summaries\n\npar_summ_ond = data.frame(surv_fit_ONI1$summary.fixed %>% \n             dplyr::select(`mean`,`0.5quant`,`mode`,`sd`) %>% \n             dplyr::rename(median = `0.5quant`))\n\n\n\nHPD intervas\n\n# intercept(beta_0)\npar_hpd_ond=\nbind_rows(\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.fixed$`(Intercept)`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.fixed$`(Intercept)`)[2],\n           row.names = \"(Intercept)\"),\n# slope (ONI)\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.fixed$OND)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.fixed$OND)[2],\n           row.names = \"OND\") \n)\n\n\npar_ond = bind_cols(par_summ_ond ,par_hpd_ond)\npar_ond\n\n\n  \n\n\n\n\n\n\nHyperparameters\n\nPosterior distribution summaries\n\nhyper_summ_ond = round(surv_fit_ONI1$summary.hyperpar, 3) %>% \n  dplyr::select(`mean`,`0.5quant`,`mode`,`sd`) %>% \n  dplyr::rename(median = `0.5quant`)\n\n\n\nHPD intervas\n\nhyper_hpd_ond = \nbind_rows(\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Precision for season`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Precision for season`)[2],\n           row.names = \"Precision for season\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Precision for S`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Precision for S`)[2],\n           row.names = \"Precision for S\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Phi for S`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Phi for S`)[2],\n           row.names = \"Phi for S\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Precision for baseline.hazard`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI1$marginals.hyperpar$`Precision for baseline.hazard`)[2],\n           row.names = \"Precision for baseline.hazard\")\n)\n\n\nhyper_ond = bind_cols(hyper_summ_ond,hyper_hpd_ond)\n\n\nbind_rows(par_ond,hyper_ond) %>% \n  rownames_to_column(\"parameter\") \n\n\n  \n\n\n\n\n\n\n\nModel for MJJ\n\nform_surv_ONI2 = inla.surv(days, count) ~ 1 + MJJ +\n  f(season, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n  f(S, model = \"bym2\", graph = W.pr_dist200,\n    hyper = list(prec = list(param = c(0.001, 0.001)), \n                 phi = list(prior = \"pc\", \n                            param = c(phi.u, phi.alpha),\n                            initial = -3)))\n\n\nsurv_fit_ONI2 = inla(form_surv_ONI2,\n                        data = inla_data_enso,\n                        family = \"coxph\",\n                     control.fixed=list(prec.intercept=1),\n                     control.hazard = list(hyper = list(prec = list(param = c(0.001, 0.001)))),\n                        control.compute=list(dic=TRUE,\n                                             cpo=TRUE,\n                                             waic=TRUE,\n                                             openmp.strategy=\"huge\"))\n\n# saveRDS(surv_fit_ONI2, \"./.models/model_oni2.RDS\")\n\n\nModel summary\n\nsummary(surv_fit_ONI2)\n\n\nCall:\n   c(\"inla(formula = cph$formula, family = cph$family, contrasts = \n   contrasts, \", \" data = c(as.list(cph$data), cph$data.list), quantiles = \n   quantiles, \", \" E = cph$E, offset = offset, scale = scale, weights = \n   weights, \", \" Ntrials = NULL, strata = NULL, verbose = verbose, lincomb \n   = lincomb, \", \" selection = selection, control.compute = \n   control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inla, \n   control.results = control.results, \", \" control.fixed = control.fixed, \n   control.mode = control.mode, \", \" control.expert = control.expert, \n   control.hazard = control.hazard, \", \" control.lincomb = \n   control.lincomb, control.update = control.update, \", \" control.pardiso \n   = control.pardiso, only.hyperparam = only.hyperparam, \", \" inla.call = \n   inla.call, inla.arg = inla.arg, num.threads = num.threads, \", \" \n   blas.num.threads = blas.num.threads, keep = keep, working.directory = \n   working.directory, \", \" silent = silent, debug = debug)\") \nTime used:\n    Pre = 40.6, Running = 80, Post = 0.765, Total = 121 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -3.787 0.143     -4.064   -3.789     -3.499 -3.792   0\nMJJ          0.697 0.258      0.184    0.697      1.210  0.697   0\n\nRandom effects:\n  Name    Model\n    season IID model\n   S BYM2 model\n   baseline.hazard RW1 model\n\nModel hyperparameters:\n                                  mean       sd 0.025quant 0.5quant 0.975quant\nPrecision for season          4.91e+00 1.92e+00   2.05e+00 4.63e+00   9.46e+00\nPrecision for S               1.73e+09 4.49e+10   3.61e+06 9.66e+07   9.91e+09\nPhi for S                     2.81e-01 2.47e-01   9.00e-03 2.03e-01   8.64e-01\nPrecision for baseline.hazard 2.97e+01 1.19e+01   1.21e+01 2.79e+01   5.81e+01\n                                  mode\nPrecision for season          4.06e+00\nPrecision for S               6.57e+06\nPhi for S                     1.60e-02\nPrecision for baseline.hazard 2.42e+01\n\nExpected number of effective parameters(stdev): 28.64(0.493)\nNumber of equivalent replicates : 651.69 \n\nDeviance Information Criterion (DIC) ...............: 14792.78\nDeviance Information Criterion (DIC, saturated) ....: 9910.78\nEffective number of parameters .....................: 28.93\n\nWatanabe-Akaike information criterion (WAIC) ...: 14791.48\nEffective number of parameters .................: 27.43\n\nMarginal log-Likelihood:  -6871.68 \nCPO and PIT are computed\n\nPosterior marginals for the linear predictor and\n the fitted values are computed\n\n\n\n\nParameters\n\nPosterior distribution summaries\n\npar_summ_mjj = \ndata.frame(surv_fit_ONI2$summary.fixed %>% \n             dplyr::select(`mean`,`0.5quant`,`mode`,`sd`) %>% \n             dplyr::rename(median = `0.5quant`))\n\n\n\nHPD intervas\n\npar_hpd_mjj = \n# intercept(beta_0)\nbind_rows(\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.fixed$`(Intercept)`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.fixed$`(Intercept)`)[2],\n           row.names = \"(Intercept)\"),\n# slope (ONI)\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.fixed$MJJ)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.fixed$MJJ)[2],\n           row.names = \"MJJ\") \n)\n\n\npar_mjj = bind_cols(par_summ_mjj,par_hpd_mjj)\n\n\n\n\nHyperparameters\n\nPosterior distribution summaries\n\nhyper_summ_mjj = \nround(surv_fit_ONI2$summary.hyperpar, 3) %>% \n  dplyr::select(`mean`,`0.5quant`,`mode`,`sd`) %>% \n  dplyr::rename(median = `0.5quant`)\n\n\n\nHPD intervas\n\nhyper_hpd_mjj = \nbind_rows(\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Precision for season`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Precision for season`)[2],\n           row.names = \"Precision for season\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Precision for S`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Precision for S`)[2],\n           row.names = \"Precision for S\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Phi for S`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Phi for S`)[2],\n           row.names = \"Phi for S\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Precision for baseline.hazard`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI2$marginals.hyperpar$`Precision for baseline.hazard`)[2],\n           row.names = \"Precision for baseline.hazard\")\n)\n\n\nhyper_mjj = bind_cols(hyper_summ_mjj,hyper_hpd_mjj)\nhyper_mjj\n\n\n  \n\n\n\n\n\n\n\nModel for JFM\n\nform_surv_ONI3 = inla.surv(days, count) ~ 1 + JFM + \n  f(season, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n  f(S, model = \"bym2\", graph = W.pr_dist200,\n    hyper = list(prec = list(param = c(0.001, 0.001)), \n                 phi = list(prior = \"pc\", \n                            param = c(phi.u, phi.alpha),\n                            initial = -3)))\n\n\nsurv_fit_ONI3 = inla(form_surv_ONI3,\n                        data = inla_data_enso,\n                        family = \"coxph\",\n                     control.fixed=list(prec.intercept=1),\n                     control.hazard = list(hyper = list(prec = list(param = c(0.001, 0.001)))),\n                        control.compute=list(dic=TRUE,\n                                             cpo=TRUE,\n                                             waic=TRUE,\n                                             openmp.strategy=\"huge\"))\n\n# saveRDS(surv_fit_ONI3, \"./.models/model_oni3.RDS\")\n\n\nModel summary\n\nsummary(surv_fit_ONI3)\n\n\nCall:\n   c(\"inla(formula = cph$formula, family = cph$family, contrasts = \n   contrasts, \", \" data = c(as.list(cph$data), cph$data.list), quantiles = \n   quantiles, \", \" E = cph$E, offset = offset, scale = scale, weights = \n   weights, \", \" Ntrials = NULL, strata = NULL, verbose = verbose, lincomb \n   = lincomb, \", \" selection = selection, control.compute = \n   control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inla, \n   control.results = control.results, \", \" control.fixed = control.fixed, \n   control.mode = control.mode, \", \" control.expert = control.expert, \n   control.hazard = control.hazard, \", \" control.lincomb = \n   control.lincomb, control.update = control.update, \", \" control.pardiso \n   = control.pardiso, only.hyperparam = only.hyperparam, \", \" inla.call = \n   inla.call, inla.arg = inla.arg, num.threads = num.threads, \", \" \n   blas.num.threads = blas.num.threads, keep = keep, working.directory = \n   working.directory, \", \" silent = silent, debug = debug)\") \nTime used:\n    Pre = 41.8, Running = 90.9, Post = 1.08, Total = 134 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -3.759 0.167     -4.079   -3.763     -3.418 -3.769   0\nJFM          0.082 0.160     -0.235    0.081      0.400  0.081   0\n\nRandom effects:\n  Name    Model\n    season IID model\n   S BYM2 model\n   baseline.hazard RW1 model\n\nModel hyperparameters:\n                                  mean       sd 0.025quant 0.5quant 0.975quant\nPrecision for season          3.17e+00 1.22e+00   1.33e+00 3.00e+00   6.04e+00\nPrecision for S               2.14e+09 6.53e+10   4.22e+06 1.07e+08   1.19e+10\nPhi for S                     2.81e-01 2.51e-01   9.00e-03 1.98e-01   8.74e-01\nPrecision for baseline.hazard 2.97e+01 1.19e+01   1.21e+01 2.79e+01   5.81e+01\n                                  mode\nPrecision for season          2.65e+00\nPrecision for S               7.94e+06\nPhi for S                     1.60e-02\nPrecision for baseline.hazard 2.43e+01\n\nExpected number of effective parameters(stdev): 28.86(0.457)\nNumber of equivalent replicates : 646.69 \n\nDeviance Information Criterion (DIC) ...............: 14792.94\nDeviance Information Criterion (DIC, saturated) ....: 9910.93\nEffective number of parameters .....................: 29.13\n\nWatanabe-Akaike information criterion (WAIC) ...: 14791.63\nEffective number of parameters .................: 27.62\n\nMarginal log-Likelihood:  -6875.21 \nCPO and PIT are computed\n\nPosterior marginals for the linear predictor and\n the fitted values are computed\n\n\n\n\nParameters\n\nPosterior distribution summaries\n\npar_summ_jfm = \n data.frame(surv_fit_ONI3$summary.fixed %>% \n             dplyr::select(`mean`,`0.5quant`,`mode`,`sd`) %>% \n             dplyr::rename(median = `0.5quant`))\n\n\n\nHPD intervas\n\npar_hpd_jfm = \n# intercept(beta_0)\nbind_rows(\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.fixed$`(Intercept)`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.fixed$`(Intercept)`)[2],\n           row.names = \"(Intercept)\"),\n# slope (ONI)\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.fixed$JFM)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.fixed$JFM)[2],\n           row.names = \"JFM\") \n)\n\n\npar_jfm = bind_cols(par_summ_jfm,par_hpd_jfm)\n\n\n\n\nHyperparameters\n\nPosterior distribution summaries\n\nhyper_summ_jfm = \nround(surv_fit_ONI3$summary.hyperpar, 3) %>% \n  dplyr::select(`mean`,`0.5quant`,`mode`,`sd`) %>% \n  dplyr::rename(median = `0.5quant`)\n\n\n\nHPD intervas\n\nhyper_hpd_jfm = \nbind_rows(\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Precision for season`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Precision for season`)[2],\n           row.names = \"Precision for season\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Precision for S`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Precision for S`)[2],\n           row.names = \"Precision for S\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Phi for S`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Phi for S`)[2],\n           row.names = \"Phi for S\"),\n\ndata.frame(HPD_lower = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Precision for baseline.hazard`)[1],\n           HPD_upper = inla.hpdmarginal(0.95, surv_fit_ONI3$marginals.hyperpar$`Precision for baseline.hazard`)[2],\n           row.names = \"Precision for baseline.hazard\")\n)\n\n\nhyper_jfm = bind_cols(hyper_summ_jfm,hyper_hpd_jfm)\n\n\n\n\n\n\nFull table of Bayesian estimators\n\nfull_table_oni = bind_rows(\nbind_rows(par_jfm,hyper_jfm) %>% \n  rownames_to_column(\"parameter\") %>%\n  mutate(trimester = \"JFM\") ,\n\nbind_rows(par_mjj,hyper_mjj) %>% \n  rownames_to_column(\"parameter\")%>%\n  mutate(trimester = \"MJJ\"),\n\nbind_rows(par_ond,hyper_ond) %>% \n  rownames_to_column(\"parameter\")%>%\n  mutate(trimester = \"OND\")) %>% \n  relocate(trimester) %>% \n  mutate(mean = ifelse(mean<10,round(mean,2), format(round(mean,2), digits = 3, scientific = T)),\n         \n         median = ifelse(median<10, round(median,2), format(round(median,2), digits = 3, scientific = T)),\n         \n         mode = ifelse(mode<10,round(mode,2), format(round(mode,2), digits = 3, scientific = T)),\n         \n         sd = ifelse(sd<10,round(sd,2),format(round(sd,2), digits = 3, scientific = T)),\n         \n         HPD_lower = ifelse(HPD_lower<10,round(HPD_lower,2), format(round(HPD_lower,2), digits = 3, scientific = T)),\n         \n         HPD_upper = ifelse(HPD_upper<10 ,round(HPD_upper,2), format(round(HPD_upper,2), digits = 3, scientific = T))\n         )\n\n\nfull_table_oni"
  }
]